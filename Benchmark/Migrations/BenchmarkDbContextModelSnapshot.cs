// <auto-generated />
using System;
using Benchmark.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Benchmark.Migrations
{
    [DbContext(typeof(BenchmarkDbContext))]
    partial class BenchmarkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Benchmark.Models.BenchmarkRecord", b =>
                {
                    b.Property<Guid>("BenchmarkDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BenchmarkDbId");

                    b.ToTable("BenchmarkRecords");
                });

            modelBuilder.Entity("Benchmark.Models.BenchmarkRecordNoBase", b =>
                {
                    b.Property<Guid>("BenchmarkDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BenchmarkDbId");

                    b.ToTable("BenchmarkRecordNoBases");
                });

            modelBuilder.Entity("Benchmark.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DeliveredDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DisplayTimeSeconds")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExpirationDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("QrCode")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("ResponseRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(128)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Benchmark.Models.NotificationBody", b =>
                {
                    b.Property<Guid>("NotificationBodyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(32)");

                    b.Property<DateTimeOffset>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("NotificationBodyId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationBodies");
                });

            modelBuilder.Entity("Benchmark.Models.NotificationResponse", b =>
                {
                    b.Property<Guid>("NotificationResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(32)");

                    b.Property<DateTimeOffset>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("NotificationResponseId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationResponses");
                });

            modelBuilder.Entity("Benchmark.Models.NotificationTitle", b =>
                {
                    b.Property<Guid>("NotificationTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(32)");

                    b.Property<DateTimeOffset>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("NotificationTitleId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationTitles");
                });

            modelBuilder.Entity("Benchmark.Models.UsersToNotification", b =>
                {
                    b.Property<Guid>("UsersToNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("UsersToNotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UsersToNotifications");
                });

            modelBuilder.Entity("Benchmark.Models.UsersToNotification_Acknowledged", b =>
                {
                    b.Property<Guid>("UsersToNotification_AcknowledgedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AcknowledgedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Cash360_SentOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Koyus_SentOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedOnUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NotificationResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("UsersToNotification_AcknowledgedId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("NotificationResponseId");

                    b.ToTable("UsersToNotification_Acknowledgeds");
                });

            modelBuilder.Entity("Benchmark.Models.NotificationBody", b =>
                {
                    b.HasOne("Benchmark.Models.Notification", "Notification")
                        .WithMany("NotificationBodies")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Benchmark.Models.NotificationResponse", b =>
                {
                    b.HasOne("Benchmark.Models.Notification", "Notification")
                        .WithMany("NotificationResponses")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Benchmark.Models.NotificationTitle", b =>
                {
                    b.HasOne("Benchmark.Models.Notification", "Notification")
                        .WithMany("NotificationTitles")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Benchmark.Models.UsersToNotification", b =>
                {
                    b.HasOne("Benchmark.Models.Notification", "Notification")
                        .WithMany("UsersToNotification")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Benchmark.Models.UsersToNotification_Acknowledged", b =>
                {
                    b.HasOne("Benchmark.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Benchmark.Models.NotificationResponse", "NotificationResponse")
                        .WithMany()
                        .HasForeignKey("NotificationResponseId");

                    b.Navigation("Notification");

                    b.Navigation("NotificationResponse");
                });

            modelBuilder.Entity("Benchmark.Models.Notification", b =>
                {
                    b.Navigation("NotificationBodies");

                    b.Navigation("NotificationResponses");

                    b.Navigation("NotificationTitles");

                    b.Navigation("UsersToNotification");
                });
#pragma warning restore 612, 618
        }
    }
}
